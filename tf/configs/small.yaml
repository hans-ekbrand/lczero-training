%YAML 1.2
---
name: 'kb1-64x6-small'                       # ideally no spaces
gpu: 0                                 # gpu id to process on

dataset: 
  num_chunks: 800                   # newest nof chunks to parse (chunks is games, for all I know).
  allow_less_chunks: true
  train_ratio: 0.90                    # trainingset ratio
  input: '/home/hans/leela-training-games/small/lc0/*/' # this is a location on the game generating client.
  ## experimental_v5_only_dataset: true # requires v5 training format support which appeared in March 22 2020.

training:
    batch_size: 1024                   # training batch size (reduce to 512 on the GTX 950). If you have the memory, 4096 is reported to be even faster. Note the linear correlation between batch size and learning rate!
    test_steps: 5                   # eval test set values after this many steps
    train_avg_report_steps: 50       # training reports its average values after this many steps.
    total_steps: 25                # terminate after these steps
    warmup_steps: 25                  # if global step is less than this, scale the current LR by ratio of global step to this value
    # checkpoint_steps: 10000          # optional frequency for checkpointing before finish
    shuffle_size: 524288               # size of the shuffle buffer
    lr_values:                         # list of learning rates (Only the first will be used, since the lr_boundaries are higher than total_steps). 0.1 is a rather high learning rate, especially considering that small batch size.
    # if you increase the batch_size by four, then increase the learning rate be four as well!
        - 0.25
        - 0.01
        - 0.001
    lr_boundaries:                     # list of boundaries. Ignore these, change Learning Rate manually when there is no Elo-improvment using a fixed anchor, e.g. Stockfish.
        - 10000000
        - 13000000
    policy_loss_weight: 1.0            # weight of policy loss
    value_loss_weight: 1.0             # weight of value loss
    path: '/home/hans'    # network storage dir
    moves_left_loss_weight: .01

model:
  filters: 64
  residual_blocks: 6
  se_ratio: 4

  
...
